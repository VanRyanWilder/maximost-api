import { BaseAuth } from './auth';
import { AuthApiClient } from './auth-api-requests';
import type { RetryConfig } from './client';
import type { Credential } from './credential';
import type { KeyStorer } from './key-store';
import { WorkersKVStore } from './key-store';
export { type Credential, ServiceAccountCredential } from './credential';
export { emulatorHost, useEmulator } from './emulator';
export type { KeyStorer };
export type { EmulatorEnv } from './emulator';
export type { FirebaseIdToken } from './token-verifier';
export type { RetryConfig };
export * from './errors';
export declare class Auth extends BaseAuth {
    private static instance?;
    private static withCredential?;
    private constructor();
    static getOrInitialize(projectId: string, keyStore: KeyStorer, credential?: Credential): Auth;
}
export declare class WorkersKVStoreSingle extends WorkersKVStore {
    private static instance?;
    private constructor();
    static getOrInitialize(cacheKey: string, cfKVNamespace: KVNamespace): WorkersKVStoreSingle;
}
export declare class AdminAuthApiClient extends AuthApiClient {
    private static instance?;
    private constructor();
    static getOrInitialize(projectId: string, credential: Credential, retryConfig?: RetryConfig): AdminAuthApiClient;
}
